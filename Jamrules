if $(COMPILER) = "clang" {
    C++ = clang ;
    C++FLAGS += -O0  -W -Wall -g -Wno-c++11-extensions -Wno-local-type-template-args ;
    LINK = $(C++) ;
    LINKFLAGS = -g ;
    LIBS = -lstdc++ -lboost_thread -lboost_filesystem -lboost_system -lboost_program_options -lboost_date_time -ltidy ;
    BUILD = build/clang ;
} else {
    C++ = g++ ;
    C++FLAGS += -g -W -Wall -Wno-c++0x-compat -std=c++11 ;
    LINK = $(C++) ;
    LINKFLAGS = -g ;
    LIBS = -lboost_thread -lboost_filesystem -lboost_system -lboost_program_options -lboost_date_time -ltidy ;
    BUILD = build/g++ ;
}


rule SubInclude
{
    if ! $($(<[1]))
    {
        Exit SubInclude $(<[1]) without prior SubDir $(<[1]) ;
    }

    local _tokens = $(SUBDIR_TOKENS) ;
    SubDir $(<) ;

    local a b ;
    for a in $(IncludedDirectories) {
        if $(a) = $(SUBDIR) {
            b = true ;
        }
    }

    if ! $(b) {
        IncludedDirectories += $(SUBDIR) ;
        include $(JAMFILE:D=$(SUBDIR)) ;
    }

    SubDir TOP $(_tokens) ;
}


rule Build
{
    LOCATE_TARGET = [ FDirName $(TOP) $(BUILD) $(SUBDIR_TOKENS) ] ;
    Objects $(>) ;
    set-$(<) += [ FGristFiles $(>:S=$(SUFOBJ)) ] ;
    sets += $(<) ;
}


rule UseLibrary
{
    LINKLIBS on [ FGristFiles $(<:S=$(SUFOBJ)) ] += -l$(>) ;
}


rule Executable
{
    local target a ;
    Depends exe : $(<) ;
    Depends $(<) : $(set-$(>)) ;
    MakeLocate $(<) : [ FDirName $(TOP) bin ] ;
    Clean clean : $(<) ;
    Link $(<) : $(set-$(>)) ;
    for a in $(set-$(>)) {
        on $(a) LINKLIBS on $(<) += $(LINKLIBS) ;
    }
}

rule Program
{
    Executable $(<) : $(>) ;
    InstallBin $(INSTALLROOT)$(BINDIR) : $(<) ;
}

rule Server
{
    Executable $(<) : $(>) ;
    InstallBin $(INSTALLROOT)$(SBINDIR) : $(<) ;
}
